# Set search parameters
$minimumSize = 0x1000
$minimumEntropy = 7.9
$typicalPath = "HKLM:\SOFTWARE\Classes\.wav\OpenWithProgIds"

# Function to calculate entropy of a byte array
function Get-Entropy($bytes) {
    $byteFrequency = @{}
    $byteCount = $bytes.Count

    foreach ($byte in $bytes) {
        if ($byteFrequency.ContainsKey($byte)) {
            $byteFrequency[$byte]++
        } else {
            $byteFrequency[$byte] = 1
        }
    }

    $entropy = 0
    foreach ($freq in $byteFrequency.Values) {
        $probability = $freq / $byteCount
        $entropy -= $probability * [Math]::Log($probability, 2)
    }

    return $entropy
}

# Function to search registry for the specified criteria
function Search-Registry {
    param(
        [Parameter(Mandatory=$true)] [ValidateRange(0, [int]::MaxValue)] $minSize,
        [Parameter(Mandatory=$true)] [double] $minEntropy
    )

    $hives = "HKLM:", "HKCU:", "HKCR:", "HKU:", "HKCC:"

    foreach ($hive in $hives) {
        Write-Host "Searching in hive: $hive"
        Get-ChildItem -Path $hive -Recurse -ErrorAction SilentlyContinue |
        Get-ItemProperty -ErrorAction SilentlyContinue |
        ForEach-Object {
            $registryItem = $_
            $properties = $_.PSObject.Properties |
                          Where-Object { $_.Value -is [byte[]] -and $_.Value.Count -ge $minSize -and (Get-Entropy $_.Value) -ge $minEntropy }
            if ($properties) {
                Write-Host "Found matching registry value:"
                $properties | Select-Object @{Name="Path"; Expression={$registryItem.PSPath}}, @{Name="Name"; Expression={$_.Name}}, @{Name="Value"; Expression={$_.Value}}
            }
        }
    }
}


# Measure the time taken for the scan
$sw = [System.Diagnostics.Stopwatch]::StartNew()

# Check the typical path first
Write-Host "Checking typical path: $typicalPath"
$typicalResult = Get-ItemProperty -Path $typicalPath -ErrorAction SilentlyContinue |
                 ForEach-Object {
                     $properties = $_.PSObject.Properties |
                                   Where-Object { $_.Value -is [byte[]] -and $_.Value.Count -ge $minimumSize -and (Get-Entropy $_.Value) -ge $minimumEntropy }
                     if ($properties) {
                         Write-Host "Found at typical path!"
                         $properties | Select-Object @{Name="Path"; Expression={$_.PSPath}}, @{Name="Name"; Expression={$_.Name}}, @{Name="Value"; Expression={$_.Value}}
                     }
                 }

if (-not $typicalResult) {
    Write-Host "Not found at typical path, scanning the full registry..."
    Search-Registry -minSize $minimumSize -minEntropy $minimumEntropy
}

$sw.Stop()
$elapsedTime = $sw.Elapsed
Write-Host "Time taken for the scan: $($elapsedTime.ToString())"