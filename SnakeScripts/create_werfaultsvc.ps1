function CreateService {
    param (
        [Parameter(Mandatory = $true)]
        [ValidateSet("typical", "custom")]
        [string]$pathType
    )

    # Check if running as administrator
    if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
        Write-Host "Please run PowerShell as an administrator to create the service and fake WerFault.exe file." -ForegroundColor Red
        exit
    }

    # Original path in WinSxS folder
    $winSxSPath = Join-Path $env:windir "WinSxS"
    $typicalPath = Join-Path $winSxSPath "x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\WerFault.exe"

    if ($pathType -eq "custom") {
        # Create the custom WerFault.exe path
        $customPath = Join-Path $env:ProgramData "CustomWerFault"
        $werFaultPath = Join-Path $customPath "WerFault.exe"

        if (-not (Test-Path $customPath)) {
            Write-Host "Creating the custom path at: $customPath" -ForegroundColor Yellow
            New-Item -Path $customPath -ItemType Directory | Out-Null
        }

        # Create the fake WerFault.exe file
        Write-Host "Creating the fake WerFault.exe file at: $werFaultPath" -ForegroundColor Yellow
        New-Item -Path $werFaultPath -ItemType File -Force | Out-Null
    } else {
        $werFaultPath = $typicalPath
    }

    # Create the WerFaultSvc service
    $serviceName = "WerFaultSvc"
    $serviceDisplayName = "WerFault Service"
    $serviceDescription = "Example Snake-like service"

    Write-Host "Creating the WerFaultSvc service" -ForegroundColor Yellow
    New-Service -Name $serviceName -BinaryPathName $werFaultPath -DisplayName $serviceDisplayName -Description $serviceDescription -StartupType Automatic | Out-Null

    Write-Host "WerFaultSvc service and fake WerFault.exe file have been created." -ForegroundColor Green
}



# Function to delete the service
function DeleteService {
    # Check if running as administrator
    if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
        Write-Host "Please run PowerShell as an administrator to remove the service and fake WerFault.exe file." -ForegroundColor Red
        exit
    }

    # Stop and remove the WerFaultSvc service
    $serviceName = "WerFaultSvc"

    if (Get-Service $serviceName -ErrorAction SilentlyContinue) {
        Write-Host "Stopping and removing the WerFaultSvc service" -ForegroundColor Yellow
        Stop-Service $serviceName -Force -ErrorAction SilentlyContinue
        sc.exe delete $serviceName | Out-Null
    }

    # Delete the fake WerFault.exe file
    $werFaultPath = Join-Path $env:ProgramData "CustomWerFault\WerFault.exe"

    if (Test-Path $werFaultPath) {
        Write-Host "Deleting the fake WerFault.exe file at: $werFaultPath" -ForegroundColor Yellow
        Remove-Item $werFaultPath -Force
    }

    # Delete the custom path if it's empty
    $customPath = Join-Path $env:ProgramData "CustomWerFault"

    if ((Test-Path $customPath) -and (!(Get-ChildItem $customPath))) {
        Write-Host "Deleting the empty custom path at: $customPath" -ForegroundColor Yellow
        Remove-Item $customPath -Force
    }

    Write-Host "WerFaultSvc service and fake WerFault.exe file have been removed." -ForegroundColor Green
}